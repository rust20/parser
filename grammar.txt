program: function*
function: ident "(" paramlist? ")" block
paramlist: ident ("," ident)*
block: "{" statement* "}"
statement: ("auto" | "register") ident "=" expr ";"
         | "return" expr? ";"
         | block
         | "while" "(" expr ")" statement
         | "if" "(" expr ")" statement ("else" statement)?
         | expr ";"


expr:       assign
assign:     or (= or)*
or:         and (|| and)*
and:        bit_or (&& bit_or)*

bit_or:     bit_xor (| bit_xor)*
bit_xor:    bit_and (^ bit_and)*
bit_and:    equality (& equality)*

equality:   ineq ((== | !=) ineq)*
ineq:       shift ((< | > | <= | >=) shift)*

shift:      term ((<< | >>) term)*
term:       factor ((+ | -) factor)*
factor:     unary ((* | / | %) unary)*

unary:      ("-" | | "!" | "~" | "&")* e_subscript
e_subscript: primary ("[" expr sizespec? "]")*

primary: "(" expr ")"
    | ident "(" arglist? ")"
    | ident
    | number


arglist: expr ("," expr)*
sizespec: "@" number
ident: r"[a-zA-Z_][a-zA-Z0-9_]*"
number: r"[0-9]+"

-------------------------------- 


program: function program
program: function

function: ident "(" paramlist ")" block
function: ident "(" ")" block

paramlist: ident "," paramlist
paramlist: ident

block: "{" statement "}"

statement: "auto" ident "=" expr ";" statement
statement: "auto" ident "=" expr ";"
statement: "register" ident "=" expr ";" statement
statement: "register" ident "=" expr ";"
statement: "return" expr? ";"
statement: "return"  ";"
statement: block
statement: "while" "(" expr ")" statement
statement: "if" "(" expr ")" statement ("else" statement)
statement: "if" "(" expr ")" statement 
statement: expr ";"


expr:       assign
assign:     or "=" assign
assign:     or 
or:         and "||" or
or:         and 
and:        bit_or "&&" and
and:        bit_or 

bit_or:     bit_xor ("|" bit_xor)*
bit_xor:    bit_and ("^" bit_and)*
bit_and:    equality ("&" equality)*

equality:   ineq (("==" | "!=") ineq)*
ineq:       shift ((< "|" > | "<=" | ">=)" shift)*

shift:      term (("<<" | ">>)" term)*
term:       factor (("+" | "-") factor)*
factor:     unary (("*" | "/" | "%") unary)*

unary:      unary_ e_subscript
unary_:      "-" unary
unary_:      "!" unary
unary_:      "~" unary
unary_:      "&" unary
unary_:      "-" 
unary_:      "!" 
unary_:      "~" 
unary_:      "&" 


e_subscript: primary subscript
e_subscript: primary
subscript: "[" expr sizespec? "]" subscript
subscript: "[" expr "]"


primary: "(" expr ")"
    | ident "(" arglist ")"
    | ident "("  ")"
    | ident
    | number


arglist: expr "," arglist
arglist: expr

sizespec: "@" number

ident: r"[a-zA-Z_][a-zA-Z0-9_]*"
number: r"[0-9]+"


